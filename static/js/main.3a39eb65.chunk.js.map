{"version":3,"sources":["AppHelmet.tsx","AppGlobalStyles.tsx","styles/breakpoints.ts","styles/theme.ts","components/presentational/Banner.tsx","components/presentational/Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppHelmet","href","rel","createGlobalStyle","size","mobile","tablet","desktop","colors","applyAlpha","color","alpha","theme","banner","background","links","About","hoverBackground","Books","Illustrations","Contact","StyledHeader","styled","header","props","_","breakpoints","StyledHeaderSlogan","div","Banner","StyledNavbar","StyledNavbarList","ul","StyledNavbarItem","li","StyledNavbarLink","name","StyledNavbarHighlighter","activeLink","title","left","Navbar","pathname","reduce","acc","link","index","route","length","getCurrentLinkConfig","useLocation","map","key","to","defaultProps","LINKS","App","AppGlobalStyles","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a39eb65.chunk.js","sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet-async';\n\n\nconst AppHelmet = () =>  (\n    <Helmet>\n        <title>Cli Murphy Illustration</title>\n        <link href=\"https://fonts.googleapis.com/css2?family=Poiret+One&display=swap\" rel=\"stylesheet\"></link>\n    </Helmet>\n);\n\nexport default AppHelmet;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n    html * {\n        font-family: 'Poiret One', cursive;\n    }\n\n    body {\n        margin: 0;\n    }\n\n    div {\n        height: auto;\n        width: 100%;\n    }\n\n    html,\n    body,\n    div,\n    span,\n    applet,\n    object,\n    iframe,\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6,\n    p,\n    blockquote,\n    pre,\n    a,\n    abbr,\n    acronym,\n    address,\n    big,\n    cite,\n    code,\n    del,\n    dfn,\n    em,\n    img,\n    ins,\n    kbd,\n    q,\n    s,\n    samp,\n    small,\n    strike,\n    strong,\n    sub,\n    sup,\n    tt,\n    var,\n    b,\n    u,\n    i,\n    center,\n    dl,\n    dt,\n    dd,\n    ol,\n    ul,\n    li,\n    fieldset,\n    form,\n    label,\n    legend,\n    table,\n    caption,\n    tbody,\n    tfoot,\n    thead,\n    tr,\n    th,\n    td,\n    article,\n    aside,\n    canvas,\n    details,\n    embed,\n    figure,\n    figcaption,\n    footer,\n    header,\n    hgroup,\n    menu,\n    nav,\n    output,\n    ruby,\n    section,\n    summary,\n    time,\n    mark,\n    audio,\n    video {\n        margin: 0;\n        padding: 0;\n        border: 0;\n        font-size: 100%;\n        font: inherit;\n        vertical-align: baseline;\n        font-family: 'Poiret One', cursive;\n    }\n\n    /* HTML5 display-role reset for older browsers */\n\n    article,\n    aside,\n    details,\n    figcaption,\n    figure,\n    footer,\n    header,\n    hgroup,\n    menu,\n    nav,\n    section {\n        display: block;\n        font-family: 'Poiret One', cursive;\n    }\n\n    body {\n        line-height: 1;\n    }\n\n    ol,\n    ul {\n        list-style: none;\n    }\n\n    blockquote,\n    q {\n        quotes: none;\n    }\n\n    blockquote {\n        &:before,\n        &:after {\n            content: \"\";\n            content: none;\n        }\n    }\n\n    q {\n        &:before,\n        &:after {\n            content: \"\";\n            content: none;\n        }\n    }\n\n    table {\n        border-collapse: collapse;\n        border-spacing: 0;\n    }\n`;\n","const size = {\n\tmobile: \"320px\",\n\ttablet: \"768px\",\n\tdesktop: \"1024px\",\n};\n\nexport default {\n\tmobile: `(min-width: ${size.mobile})`,\n\ttablet: `(min-width: ${size.tablet})`,\n\tdesktop: `(min-width: ${size.desktop})`,\n};\n","const colors = {\n\twhite: \"#ffffff\",\n\tblack: \"#000000\",\n\tdarkGrey: \"#333333\",\n\tlightGrey: \"#DDDDDD\",\n\tred: \"#ff626e\",\n\tdarkRed: \"#8A0000\",\n\tdarkOrange: \"#ff7e4c\",\n\torange: \"#FFDAC1\",\n\tyellow: \"#FFFFD1\",\n\tlightGreen: \"#E2F0CB\",\n\tgreen: \"#B5EAD7\",\n\tdarkGreen: \"#77bb36\",\n    blue: \"#4db7ff\",\n    purple: '#EAD2FE'\n};\n\nconst applyAlpha: (color: string, alpha: string) => string = (color, alpha) => `${color}${alpha}`;\n\nconst theme = {\n    banner: {\n        background: colors.purple\n    },\n    links: {\n        About: {\n            color: colors.red,\n            hoverBackground: applyAlpha(colors.red, '33'),\n        },\n        Books: {\n            color: colors.blue,\n            hoverBackground: applyAlpha(colors.blue, '33'),\n        },\n        Illustrations: {\n            color: colors.darkGreen,\n            hoverBackground: applyAlpha(colors.darkGreen, '33'),\n        },\n        Contact: {\n            color: colors.darkOrange,\n            hoverBackground: applyAlpha(colors.darkOrange, '33'),\n        }\n    },\n};\n\nexport default theme;","import * as React from 'react';\nimport styled from 'styled-components';\nimport * as _ from 'lodash';\n\nimport { breakpoints } from \"../../styles\";\n\ninterface BannerProps {\n\n};\n\nconst StyledHeader = styled.header`\n    display: flex;\n    padding: 8px;\n    font-size: 32px;\n    text-align: center;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    background-color: ${props => _.get(props.theme, 'banner.background')};\n\n\t@media ${breakpoints.tablet} {\n\t\tfont-size: 32px;\n\t}\n`;\n\nconst StyledHeaderSlogan = styled.div`\n    height: 200px;\n    width: 200px;\n    background-image: url('/images/slogan.svg');\n\tbackground-size: contain;\n\tbackground-repeat: no-repeat;\n\tbackground-position: 50% 50%;\n`;\n\nconst Banner: React.FC<BannerProps> = () => (\n    <StyledHeader>\n        <StyledHeaderSlogan />\n    </StyledHeader>\n);\n\nexport default Banner;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport * as _ from 'lodash';\nimport { Link, useLocation } from 'react-router-dom';\n\ninterface NavbarLink {\n    route: string;\n    title: string;\n    left?: string;\n}\n\ninterface NavbarProps {\n    links: Array<NavbarLink>;\n};\n\ninterface StyledLinkProps {\n    name: string;\n}\n\ninterface StyledHighlighterProps {\n    activeLink: NavbarLink;\n}\n\nconst StyledNavbar = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst StyledNavbarList = styled.ul`\n    position: relative;\n    display: flex;\n    max-width: 400px;\n    width: 100%;\n    justify-content: center;\n`;\n\nconst StyledNavbarItem = styled.li`\n    display: flex;\n    width: 100%;\n    height: 100%;\n    font-size: 18px;\n`;\n\nconst StyledNavbarLink = styled.div<StyledLinkProps>`\n    width: 100%;\n    height: 100%;\n\n    &:hover {\n        background-color: ${props => _.get(props, `theme.links.${props.name}.hoverBackground`)};\n    }\n\n    a {\n        display: flex;\n        height: 100%;\n        width: 100%;\n        padding-top: 8px;\n        padding-bottom: 16px;\n        text-decoration: none;\n        justify-content: center;\n        font-weight: 900;\n        color: ${props => _.get(props, `theme.links.${props.name}.color`)};\n    }\n`;\n\nconst StyledNavbarHighlighter = styled.div<StyledHighlighterProps>`\n    position: absolute;\n    width: 25%;\n    height: 2px;\n    border-bottom: 2px solid;\n    border-color: ${props => _.get(props, `theme.links.${props.activeLink.title}.color`)};\n    bottom: 0;\n    left: ${props => props.activeLink.left};\n    transition: all 400ms cubic-bezier(0.175, 0.885, 0.32, 1.275);\n`;\n\nconst getCurrentLinkConfig = (links: Array<NavbarLink>, pathname: string): NavbarLink => \n    links.reduce((acc, link, index) => {\n        if (link.route === pathname) {\n            const left = index * 100 / links.length;\n            return {\n                ...link,\n                left: `${left}%`\n            };\n        }\n        return acc;\n    }, {\n        title: '',\n        route: '',\n        left: '0%'\n    });\n\nfunction Navbar(props: NavbarProps ) {\n    const { links } = props;\n    const location = useLocation();\n    const activeLink: NavbarLink = getCurrentLinkConfig(links, location.pathname);\n\n    return (\n        <StyledNavbar>\n            <StyledNavbarList>\n                {links.map(({title, route}, index) => (\n                    <StyledNavbarItem key={index}>\n                        <StyledNavbarLink name={title}>\n                            <Link to={route}>\n                                {title}\n                            </Link>\n                        </StyledNavbarLink>\n                    </StyledNavbarItem>\n                ))}\n                <StyledNavbarHighlighter activeLink={activeLink} />\n            </StyledNavbarList>\n        </StyledNavbar>\n    );\n}\n\nNavbar.defaultProps = {\n    links: [],\n};\n\nexport default Navbar;","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { HelmetProvider } from 'react-helmet-async';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport AppHelmet from './AppHelmet';\nimport AppGlobalStyles from './AppGlobalStyles';\nimport { Banner, Navbar } from './components/presentational';\nimport { theme } from './styles';\n\nconst LINKS = [\n  { title: 'About', route: '/' },\n  { title: 'Books', route: '/books' },\n  { title: 'Illustrations', route: '/illustrations' },\n  { title: 'Contact', route: '/contact' },\n];\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <HelmetProvider>\n        <AppHelmet />\n      </HelmetProvider>\n      <AppGlobalStyles />\n      <Router>\n        <Banner />\n        <Navbar links={LINKS} />\n        {\n          LINKS.map(link => (\n            <Route key={link.route} path={link.route} exact={link.route === \"/\"}>\n              {link.title}\n            </Route>\n          ))\n        }\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}